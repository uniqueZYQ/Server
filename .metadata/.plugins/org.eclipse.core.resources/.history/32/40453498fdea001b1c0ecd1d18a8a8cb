package myServlet;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;

import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import net.sf.json.JSONObject;

/**
 * Servlet implementation class LoginServlet
 */
public class LoginServlet extends jakarta.servlet.http.HttpServlet {
	private static final long serialVersionUID = 1L;

    /**
     * Default constructor. 
     */
    public LoginServlet() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response) throws jakarta.servlet.ServletException, IOException {
		/*String stdid = request.getParameter("stdid"); 
		String pwd = request.getParameter("pwd"); 
		String resCode = "";
		String resMsg = "";
		String userId = "NULL";
		
		try {
			Connection connect = DBUtil.getConnect();
			Statement statement = (Statement) connect.createStatement();
			ResultSet result;
			
			String sqlQuery = "select * from " + DBUtil.TABLE_USER + " where stdid='" + stdid + "'"+"and pwd="+pwd;
			
			result = statement.executeQuery(sqlQuery); 
			if(result.next()){ 
				resCode = "101";
				resMsg = "登录成功";
				userId = String.valueOf(result.getInt("id"));
			} else { 
				userId = "NULL";
				resCode = "201";
				resMsg = "密码错误或账号不存在";
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		HashMap<String, String> map = new HashMap<>();
		map.put("resCode", resCode);
		map.put("resMsg", resMsg);
		map.put("userId", userId);
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter pw = response.getWriter(); 
		pw.println(map.toString()); 
		pw.flush();*/
		BufferedReader read = request.getReader();
        StringBuilder sb = new StringBuilder();
        String line = null;
        while ((line = read.readLine()) != null) {
            sb.append(line);
        }
        String req = sb.toString();
        
     // 第一步：获取 客户端 发来的请求，恢复其Json格式――>需要客户端发请求时也封装成Json格式
        JSONObject object = JSONObject.fromObject(req);
        
     // 第二步：将Json转化为别的数据结构方便使用或者直接使用（此处直接使用），进行业务处理，生成结果
        // 拼接SQL查询语句
        String sql = String.format("select * from %s where stdid=%s and pwd=%s",DBUtil.TABLE_USER,object.getString("stdid"),object.getString("pwd"));

        CommonResponse res=new CommonResponse();
        try {
			Connection connect = DBUtil.getConnect();
			Statement statement = (Statement) connect.createStatement(); // Statement可以理解为数据库操作实例，对数据库的所有操作都通过它来实现
			ResultSet result;
			
			//String sqlQuery = "select * from " + DBUtil.TABLE_USER + " where stdid='" +  + "'"+"and pwd="+pwd;
			
			// 查询类操作返回一个ResultSet集合，没有查到结果时ResultSet的长度为0
			result = statement.executeQuery(sql); // 先查询同样的账号（比如手机号）是否存在
			if(result.next()){ // 已存在
				res.setCode(1);
				res.setResponse("登录成功");
				res.setId(result.getInt("id"));
				res.setNickname(result.getString("nickname"));
				res.setRealname(result.getString("realname"));
			} else { // 不存在
				res.setCode(0);
				res.setResponse("登录失败");
				res.setId(0);
				res.setNickname("");
				res.setRealname("");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		 String resStr = JSONObject.fromObject(res).toString();
		 //response.getWriter().append(EncryptUtil.getEDSEncryptStr(resStr)); // 可以对字符串进行加密操作，相应的到了客户端就需要解密
	        response.getWriter().append(resStr).flush();

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response) throws jakarta.servlet.ServletException, IOException {
		BufferedReader read = request.getReader();
        StringBuilder sb = new StringBuilder();
        String line = null;
        while ((line = read.readLine()) != null) {
            sb.append(line);
        }
        String req = sb.toString();
        
     // 第一步：获取 客户端 发来的请求，恢复其Json格式――>需要客户端发请求时也封装成Json格式
        JSONObject object = JSONObject.fromObject(req);
        
     // 第二步：将Json转化为别的数据结构方便使用或者直接使用（此处直接使用），进行业务处理，生成结果
        // 拼接SQL查询语句
        String sql = String.format("select * from %s where stdid=%s and pwd=%s",DBUtil.TABLE_USER,object.getString("stdid"),object.getString("pwd"));

        CommonResponse res=new CommonResponse();
        try {
			Connection connect = DBUtil.getConnect();
			Statement statement = (Statement) connect.createStatement(); // Statement可以理解为数据库操作实例，对数据库的所有操作都通过它来实现
			ResultSet result;
			
			//String sqlQuery = "select * from " + DBUtil.TABLE_USER + " where stdid='" +  + "'"+"and pwd="+pwd;
			
			// 查询类操作返回一个ResultSet集合，没有查到结果时ResultSet的长度为0
			result = statement.executeQuery(sql); // 先查询同样的账号（比如手机号）是否存在
			if(result.next()){ // 已存在
				res.setCode(1);
				res.setResponse("登录成功");
				res.setId(result.getInt("id"));
				res.setNickname(result.getString("nickname"));
				res.setRealname(result.getString("realname"));
			} else { // 不存在
				res.setCode(0);
				res.setResponse("登录失败");
				res.setId(0);
				res.setNickname("");
				res.setRealname("");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		 String resStr = JSONObject.fromObject(res).toString();
		 //response.getWriter().append(EncryptUtil.getEDSEncryptStr(resStr)); // 可以对字符串进行加密操作，相应的到了客户端就需要解密
	        response.getWriter().append(resStr).flush();

	}

}
